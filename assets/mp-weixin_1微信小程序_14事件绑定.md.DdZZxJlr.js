import{_ as a,c as i,ab as e,o as t}from"./chunks/framework.DnBlaP3q.js";const o=JSON.parse('{"title":"事件绑定","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"mp-weixin/1微信小程序/14事件绑定.md","filePath":"mp-weixin/1微信小程序/14事件绑定.md"}'),n={name:"mp-weixin/1微信小程序/14事件绑定.md"};function l(h,s,p,k,d,r){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h1><h2 id="事件基础" tabindex="-1">事件基础 <a class="header-anchor" href="#事件基础" aria-label="Permalink to &quot;事件基础&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages/demo05/index.wxml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clickHandle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点我触发事件&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages/demo05/index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clickHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;点击了按钮&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="事件传参" tabindex="-1">事件传参 <a class="header-anchor" href="#事件传参" aria-label="Permalink to &quot;事件传参&quot;">​</a></h2><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages/demo05/index.wxml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-aaa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ 111 }}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-bbb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clickHandle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点我并传参&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// pages/demo05/index.js</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  clickHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;点击了按钮&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.currentTarget.dataset);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果：{ aaa: 111,  bbb: &quot;你好&quot;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="小程序-和-vue-事件绑定差别" tabindex="-1">小程序 和 <code>Vue</code> 事件绑定差别 <a class="header-anchor" href="#小程序-和-vue-事件绑定差别" aria-label="Permalink to &quot;小程序 和 \`Vue\` 事件绑定差别&quot;">​</a></h2><ol><li>小程序事件绑定<code>不能</code>使用 <code>@</code> 符号简写，需使用 <code>bind</code> 这种写法。</li><li>小程序中删除了 <code>click</code> 事件类型，用 <code>tap</code> 事件取代 <code>click</code> 事件。</li><li>小程序的事件处理函数直接 <code>Page({ })</code> 结构的<code>第一层</code>，<code>不需要</code>写到 <code>methods</code> 结构中。</li><li>小程序的事件传参，需要配合自定义属性 <code>data-xxx</code> 实现参数传递，通过 <code>e.currentTarget.dataset</code> 获取。</li></ol><h2 id="target-和-currenttarget-区别" tabindex="-1">target 和 currentTarget 区别 <a class="header-anchor" href="#target-和-currenttarget-区别" aria-label="Permalink to &quot;target 和 currentTarget 区别&quot;">​</a></h2><h3 id="target-和-currenttarget-区别-1" tabindex="-1"><code>target</code> 和 <code>currentTarget</code> 区别 <a class="header-anchor" href="#target-和-currenttarget-区别-1" aria-label="Permalink to &quot;\`target\` 和 \`currentTarget\` 区别&quot;">​</a></h3><p><code>target</code>： 触发事件的元素。</p><p><code>currentTarget </code>： 绑定事件的元素。</p><p>PS：网页端同理，小程序端其实是借鉴了网页端的<code>target</code> 和 <code>currentTarget </code> 。</p><h3 id="更稳妥的事件参数获取" tabindex="-1">更稳妥的事件参数获取 <a class="header-anchor" href="#更稳妥的事件参数获取" aria-label="Permalink to &quot;更稳妥的事件参数获取&quot;">​</a></h3><ul><li>在小程序中事件<code>参数获取</code>建议使用 <code>currentTarget </code>。🚩</li><li>因为<code>currentTarget </code>表示 <code>绑定事件的元素</code>。</li><li>不管点击元素自身还是子元素，<code>currentTarget </code> 都可以正确获取到事件绑定时传递的参数。</li></ul>`,14)]))}const g=a(n,[["render",l]]);export{o as __pageData,g as default};
