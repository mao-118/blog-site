import{_ as i,c as a,ab as t,o as h}from"./chunks/framework.DnBlaP3q.js";const E=JSON.parse('{"title":"什么是 path 路径模块","description":"","frontmatter":{},"headers":[],"relativePath":"nodejs/4path 路径模块.md","filePath":"nodejs/4path 路径模块.md"}'),n={name:"nodejs/4path 路径模块.md"};function p(e,s,l,k,d,r){return h(),a("div",null,s[0]||(s[0]=[t(`<h1 id="什么是-path-路径模块" tabindex="-1">什么是 path 路径模块 <a class="header-anchor" href="#什么是-path-路径模块" aria-label="Permalink to &quot;什么是 path 路径模块&quot;">​</a></h1><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p><p>例如：</p><ul><li><code>path.join()</code> 方法，用来将多个路径片段拼接成一个完整的路径字符串</li><li><code>path.basename()</code> 方法，用来从路径字符串中，将文件名解析出来 如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="路径拼接" tabindex="-1">路径拼接 <a class="header-anchor" href="#路径拼接" aria-label="Permalink to &quot;路径拼接&quot;">​</a></h2><p>使用 <code>path.join()</code> 方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">paths])</span></span></code></pre></div><p>参数解读：</p><ul><li>...paths <code>&lt;string&gt;</code> 路径片段的序列</li><li>返回值: <code>&lt;string&gt;</code></li></ul><h2 id="path-join-的代码示例" tabindex="-1"><code>path.join()</code> 的代码示例 <a class="header-anchor" href="#path-join-的代码示例" aria-label="Permalink to &quot;\`path.join()\` 的代码示例&quot;">​</a></h2><p>使用 <code>path.join()</code> 方法，可以把多个路径片段拼接为完整的路径字符串：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pathStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/b/c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathStr) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 /a/b/d/e</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pathStr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./files/1.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pathStr2) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 当前文件所处目录/files/1.txt</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>今后凡是涉及到路径拼接的操作，都要使用 <code>path.join()</code> 方法进行处理。不要直接使用 + 进行字符串的拼接。</p></div><h2 id="获取路径中的文件名" tabindex="-1">获取路径中的文件名 <a class="header-anchor" href="#获取路径中的文件名" aria-label="Permalink to &quot;获取路径中的文件名&quot;">​</a></h2><p>使用 <code>path.basename()</code> 方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path[,ext])</span></span></code></pre></div><p>参数解读：</p><ul><li>path <code>&lt;string&gt;</code> 必选参数，表示一个路径的字符串</li><li>ext <code>&lt;string&gt;</code> 可选参数，表示文件扩展名</li><li>返回: <code>&lt;string&gt;</code> 表示路径中的最后一部分</li></ul><h2 id="path-basename-的代码示例" tabindex="-1"><code>path.basename()</code> 的代码示例 <a class="header-anchor" href="#path-basename-的代码示例" aria-label="Permalink to &quot;\`path.basename()\` 的代码示例&quot;">​</a></h2><p>使用 <code>path.basename()</code> 方法，可以从一个文件路径中，获取到文件的名称部分：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fpath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/a/b/c/index.html&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //文件的存放路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fpath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出index.html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nameWithoutExt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fpath,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nameWithoutExt) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出index</span></span></code></pre></div><h2 id="获取路径中的文件扩展名" tabindex="-1">获取路径中的文件扩展名 <a class="header-anchor" href="#获取路径中的文件扩展名" aria-label="Permalink to &quot;获取路径中的文件扩展名&quot;">​</a></h2><p>使用 <code>path.extname()</code> 方法，可以获取路径中的扩展名部分，语法格式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path)</span></span></code></pre></div><p>参数解读：</p><ul><li>path <code>&lt;string&gt;</code>必选参数，表示一个路径的字符串</li><li>返回: <code>&lt;string&gt;</code> 返回得到的扩展名字符串</li></ul><h2 id="path-extname-的代码示例" tabindex="-1"><code>path.extname()</code> 的代码示例 <a class="header-anchor" href="#path-extname-的代码示例" aria-label="Permalink to &quot;\`path.extname()\` 的代码示例&quot;">​</a></h2><p>使用 <code>path.extname()</code> 方法，可以获取路径中的扩展名部分：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fpath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/a/b/c/index.html&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //路径字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fext</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fpath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fext)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出.html</span></span></code></pre></div>`,30)]))}const g=i(n,[["render",p]]);export{E as __pageData,g as default};
