import{_ as o,c as d,o as a,ao as c}from"./chunks/framework.vFvoFV1n.js";const p=JSON.parse('{"title":"JS 中的 == 与 ===","description":"","frontmatter":{},"headers":[],"relativePath":"blog/JS 中的 == 与 ===.md","filePath":"blog/JS 中的 == 与 ===.md"}'),i={name:"blog/JS 中的 == 与 ===.md"};function l(t,e,s,n,r,h){return a(),d("div",null,e[0]||(e[0]=[c('<h1 id="js-中的-与" tabindex="-1">JS 中的 == 与 === <a class="header-anchor" href="#js-中的-与" aria-label="Permalink to &quot;JS 中的 == 与 ===&quot;">​</a></h1><h2 id="比较" tabindex="-1">== 比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;== 比较&quot;">​</a></h2><ol><li>如果两个值类型相同，进行 === 比较。</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false 引用地址不同</span></span></code></pre></div><ol start="2"><li>如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较： <ul><li>如果一个是 <code>null</code>、一个是 <code>undefined</code>，那么<code>相等</code>。</li><li>如果任一值是字符串，另一个值是数值，在比较相等性之前先将字符串转换为数值；即是调用 <code>Number()</code> 函数。</li><li>如果任一值时布尔值，则在比较相等性之前先将其转换为数值，即是调用 <code>Number()</code> 函数。</li><li>如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的 <code>toString</code> 或者 <code>valueOf</code> 方法。 <code>js</code> 核心内置类，会尝试 <code>valueOf</code> 先于 <code>toString</code>；例外的是 <code>Date</code>，<code>Date</code> 利用的是 <code>toString</code> 转换。</li></ul></li></ol><h2 id="比较-1" tabindex="-1">=== 比较 <a class="header-anchor" href="#比较-1" aria-label="Permalink to &quot;=== 比较&quot;">​</a></h2><ol><li>如果类型不同，就<code>不相等</code></li><li>如果两个都是数值，并且是同一个值，那么<code>相等</code>；如果其中至少一个是 <code>NaN</code>，那么<code>不相等</code>。（判断一个值是否是 <code>NaN</code>，只能用 <code>isNaN()</code> 来判断）</li><li>如果两个都是字符串，每个位置的字符都一样，那么<code>相等</code>；否则<code>不相等</code>。</li><li>如果两个值都是 <code>true</code>，或者都是 <code>false</code>，那么<code>相等</code>。</li><li>如果两个值都引用同一个对象或函数，那么<code>相等</code>；否则<code>不相等</code>。</li><li>如果两个值都是 <code>null</code>，或者都是 <code>undefined</code>，那么<code>相等</code>。</li></ol>',7)]))}const u=o(i,[["render",l]]);export{p as __pageData,u as default};
