import{_ as a,c as s,ab as e,o as l}from"./chunks/framework.DnBlaP3q.js";const c=JSON.parse('{"title":"vue3 新特性及创建","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"blog/创建vue3项目.md","filePath":"blog/创建vue3项目.md"}'),t={name:"blog/创建vue3项目.md"};function n(r,i,p,h,o,k){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="vue3-新特性及创建" tabindex="-1">vue3 新特性及创建 <a class="header-anchor" href="#vue3-新特性及创建" aria-label="Permalink to &quot;vue3 新特性及创建&quot;">​</a></h1><h2 id="_1-认识-vue3" tabindex="-1">1. 认识 Vue3 <a class="header-anchor" href="#_1-认识-vue3" aria-label="Permalink to &quot;1. 认识 Vue3&quot;">​</a></h2><h3 id="_1-了解相关信息" tabindex="-1">1) 了解相关信息 <a class="header-anchor" href="#_1-了解相关信息" aria-label="Permalink to &quot;1) 了解相关信息&quot;">​</a></h3><ul><li>Vue.js 3.0 &quot;One Piece&quot; 正式版在今年 9 月份发布</li><li>2 年多开发, 100+位贡献者, 2600+次提交, 600+次 PR</li><li><span style="color:red;">Vue3 支持 vue2 的大多数特性</span></li><li><span style="color:red;">更好的支持 Typescript</span></li></ul><h3 id="_2-性能提升" tabindex="-1">2) 性能提升: <a class="header-anchor" href="#_2-性能提升" aria-label="Permalink to &quot;2) 性能提升:&quot;">​</a></h3><ul><li>打包大小减少 41%</li><li>初次渲染快 55%, 更新渲染快 133%</li><li>内存减少 54%</li><li><span style="color:red;">使用 Proxy 代替 defineProperty 实现数据响应式</span></li><li><span style="color:red;">重写虚拟 DOM 的实现和 Tree-Shaking</span></li></ul><h3 id="_3-新增特性" tabindex="-1">3) 新增特性 <a class="header-anchor" href="#_3-新增特性" aria-label="Permalink to &quot;3) 新增特性&quot;">​</a></h3><ul><li><p><span style="color:red;">Composition (组合) API</span></p></li><li><p>setup</p><ul><li>ref 和 reactive</li><li>computed 和 watch</li><li>新的生命周期函数</li><li>provide 与 inject</li><li>...</li></ul></li><li><p>新组件</p><ul><li>Fragment - 文档碎片</li><li>Teleport - 瞬移组件的位置</li><li>Suspense - 异步加载组件的 loading 界面</li></ul></li><li><p>其它 API 更新</p><ul><li>全局 API 的修改</li><li>将原来的全局 API 转移到应用对象</li><li>模板语法变化</li></ul></li></ul><h2 id="_2-创建-vue3-项目" tabindex="-1">2. 创建 vue3 项目 <a class="header-anchor" href="#_2-创建-vue3-项目" aria-label="Permalink to &quot;2. 创建 vue3 项目&quot;">​</a></h2><h3 id="_1-使用-vue-cli-创建" tabindex="-1">1) 使用 vue-cli 创建 <a class="header-anchor" href="#_1-使用-vue-cli-创建" aria-label="Permalink to &quot;1) 使用 vue-cli 创建&quot;">​</a></h3><p>文档: <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 安装或者升级</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @vue/cli</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 保证 vue cli 版本在 4.5.0 以上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 创建项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span></code></pre></div><p>然后的步骤</p><ul><li>Please pick a preset - 选择 <strong><em>Manually select features</em></strong></li><li>Check the features needed for your project - 选择上 <strong><em>TypeScript</em></strong> ，特别注意点空格是选择，点回车是下一步</li><li>Choose a version of Vue.js that you want to start the project with - 选择 <strong><em>3.x (Preview)</em></strong></li><li>Use class-style component syntax - 直接回车</li><li>Use Babel alongside TypeScript - 直接回车</li><li>Pick a linter / formatter config - 直接回车</li><li>Use history mode for router? - 直接回车</li><li>Pick a linter / formatter config - 直接回车</li><li>Pick additional lint features - 直接回车</li><li>Where do you prefer placing config for Babel, ESLint, etc.? - 直接回车</li><li>Save this as a preset for future projects? - 直接回车</li></ul><h3 id="_2-使用-vite-创建" tabindex="-1">2) 使用 vite 创建 <a class="header-anchor" href="#_2-使用-vite-创建" aria-label="Permalink to &quot;2) 使用 vite 创建&quot;">​</a></h3><ul><li><p>文档: <a href="https://v3.cn.vuejs.org/guide/installation.html" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/guide/installation.html</a></p></li><li><p>vite 是一个由原生 ESM 驱动的 Web 开发构建工具。在开发环境下基于浏览器原生 ES imports 开发，</p></li><li><p>它做到了**<em>本地快速开发启动</em>**, 在生产环境下基于 Rollup 打包。</p><ul><li>快速的冷启动，不需要等待打包操作；</li><li>即时的热模块更新，替换性能和模块数量的解耦让更新飞起；</li><li>真正的按需编译，不再等待整个应用编译完成，这是一个巨大的改变。</li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">project-nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div>`,17)]))}const d=a(t,[["render",n]]);export{c as __pageData,d as default};
