import{_ as l,c as u,ab as a,o as i}from"./chunks/framework.DnBlaP3q.js";const p=JSON.parse('{"title":"vue入门","description":"","frontmatter":{},"headers":[],"relativePath":"vue/1vue/1vue入门.md","filePath":"vue/1vue/1vue入门.md"}'),o={name:"vue/1vue/1vue入门.md"};function t(r,e,v,n,s,c){return i(),u("div",null,e[0]||(e[0]=[a('<h1 id="vue入门" tabindex="-1">vue入门 <a class="header-anchor" href="#vue入门" aria-label="Permalink to &quot;vue入门&quot;">​</a></h1><h2 id="什么是-vue" tabindex="-1">什么是 vue <a class="header-anchor" href="#什么是-vue" aria-label="Permalink to &quot;什么是 vue&quot;">​</a></h2><ol><li>构建用户界面 <ul><li>用 vue 往 html 页面中填充数据，非常的方便</li></ul></li><li>框架 <ul><li>框架是一套现成的解决方案，程序员只能遵守框架的规范，去编写自己的业务功能！</li><li>要学习 vue，就是在学习 vue 框架中规定的用法！</li><li>vue 的指令、组件（是对 UI 结构的复用）、路由、Vuex、vue 组件库</li><li>只有把上面老师罗列的内容掌握以后，才有开发 vue 项目的能力！</li></ul></li></ol><h2 id="vue-的两个特性" tabindex="-1">vue 的两个特性 <a class="header-anchor" href="#vue-的两个特性" aria-label="Permalink to &quot;vue 的两个特性&quot;">​</a></h2><ol><li><p>数据驱动视图：</p><ul><li>数据的变化<strong>会驱动视图</strong>自动更新</li><li>好处：程序员只管把数据维护好，那么页面结构会被 vue 自动渲染出来！</li></ul></li><li><p>双向数据绑定：</p><blockquote><p>在网页中，form 表单负责<strong>采集数据</strong>，Ajax 负责<strong>提交数据</strong>。</p></blockquote><ul><li>js 数据的变化，会被自动渲染到页面上</li><li>页面上表单采集的数据发生变化的时候，会被 vue 自动获取到，并更新到 js 数据中</li></ul></li></ol><blockquote><p>注意：数据驱动视图和双向数据绑定的底层原理是 MVVM（Mode 数据源、View 视图、ViewModel 就是 vue 的实例）</p></blockquote>',6)]))}const h=l(o,[["render",t]]);export{p as __pageData,h as default};
