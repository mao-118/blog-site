import{_ as a,c as i,ab as n,o as t}from"./chunks/framework.DnBlaP3q.js";const c=JSON.parse('{"title":"前置知识","description":"","frontmatter":{},"headers":[],"relativePath":"react/2ReactRouter/1前置知识.md","filePath":"react/2ReactRouter/1前置知识.md"}'),p={name:"react/2ReactRouter/1前置知识.md"};function e(l,s,h,k,E,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;">​</a></h1><h2 id="单页应用" tabindex="-1">单页应用 <a class="header-anchor" href="#单页应用" aria-label="Permalink to &quot;单页应用&quot;">​</a></h2><p>只有一个html文件 主流的开发模式变成了通过路由进行页面切换</p><p>优势: 避免整体页面刷新 用户体验变好</p><p>缺点：前端负责事情变多了 开发的难度变大</p><h2 id="路由的本质" tabindex="-1">路由的本质 <a class="header-anchor" href="#路由的本质" aria-label="Permalink to &quot;路由的本质&quot;">​</a></h2><p>概念来源于后端 : 一个路径表示匹配一个服务器资源 /a.html -&gt; a对应的文件资源 /b.html -&gt; b对应的文件资源</p><p>共同的思想: 一对一的关系</p><p>前端的路由: 一个路径path对应唯一的一个组件comonent 当我们访问一个path 自动把path对应的组件进行渲染</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: Home</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: About</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/article&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: Article</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div>`,10)]))}const d=a(p,[["render",e]]);export{c as __pageData,d as default};
