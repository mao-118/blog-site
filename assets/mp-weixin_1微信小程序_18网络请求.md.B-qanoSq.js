import{_ as i,c as a,ab as e,o as t}from"./chunks/framework.DnBlaP3q.js";const n="/blog-site/assets/image-20201025103028125.CIXm5Wlf.png",l="/blog-site/assets/image-20201025102150071.Dp0xYD5-.png",h="/blog-site/assets/image-20201025101837408.DkaWzgHP.png",y=JSON.parse('{"title":"小程序端发起网络请求","description":"","frontmatter":{},"headers":[],"relativePath":"mp-weixin/1微信小程序/18网络请求.md","filePath":"mp-weixin/1微信小程序/18网络请求.md"}'),p={name:"mp-weixin/1微信小程序/18网络请求.md"};function k(d,s,r,o,E,c){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="小程序端发起网络请求" tabindex="-1">小程序端发起网络请求 <a class="header-anchor" href="#小程序端发起网络请求" aria-label="Permalink to &quot;小程序端发起网络请求&quot;">​</a></h1><h2 id="请求三要素" tabindex="-1">请求三要素 <a class="header-anchor" href="#请求三要素" aria-label="Permalink to &quot;请求三要素&quot;">​</a></h2><ol><li>请求方式。<code>GET</code> <code>POST</code> <code>PUT</code> <code>DELETE</code> <code>...</code></li><li>请求地址。</li><li>请求参数。</li></ol><h2 id="浏览器端发送网络请求-回顾" tabindex="-1">浏览器端发送网络请求(回顾) <a class="header-anchor" href="#浏览器端发送网络请求-回顾" aria-label="Permalink to &quot;浏览器端发送网络请求(回顾)&quot;">​</a></h2><p>浏览器原生：<code>XMLHTTPRequest</code> 对象(小黄人)</p><p><code>JQ</code> 库：<code>$.ajax({ })</code>，基于 <code>XMLHTTPRequest</code> 封装。</p><p><code>axios</code> 库： <code>this.$axios</code>，基于 <code>XMLHTTPRequest</code> 封装。</p><p>拓展补充：浏览器中通过 <code>fetch</code> 也可以发送网络请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把返回的数据流处理成 json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res2);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="小程序端发送网络请求" tabindex="-1">小程序端发送网络请求 <a class="header-anchor" href="#小程序端发送网络请求" aria-label="Permalink to &quot;小程序端发送网络请求&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      method:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求方式&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求地址&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data:{ 请求参数 },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      header: {  },        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 请求头 (如：添加 token)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ },  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 成功</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ },        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 失败</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      complete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ }     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="request-合法域名" tabindex="-1">request 合法域名 <a class="header-anchor" href="#request-合法域名" aria-label="Permalink to &quot;request 合法域名&quot;">​</a></h2><p>微信小程序默认情况下，所有网络请求的地址都是认为是不安全的，因为没有在 <code>request</code> 合法域名列表中配置过。</p><p><img src="`+n+'" alt="image-20201025103028125"></p><h2 id="添加合法域名步骤" tabindex="-1">添加合法域名步骤 <a class="header-anchor" href="#添加合法域名步骤" aria-label="Permalink to &quot;添加合法域名步骤&quot;">​</a></h2><ol><li>登录微信小程序<code>开发者管理系统</code>。<a href="https://mp.weixin.qq.com/" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/</a></li><li>在 <code>开发 - 开发设置 - 服务器域名</code>，添加项目接口地址的域名即可。</li></ol><p><img src="'+l+'" alt="image-20201025102150071"></p><ol start="3"><li>开发工具中 <code>详情 - 域名信息 - 刷新</code>，刷新后看到添加的域名才算成功。</li></ol><p><img src="'+h+'" alt="image-20201025101837408"></p><h2 id="注意事项-这是要后端要注意的问题-因为接口地址是后端提供的" tabindex="-1">注意事项（这是要后端要注意的问题，因为接口地址是后端提供的） <a class="header-anchor" href="#注意事项-这是要后端要注意的问题-因为接口地址是后端提供的" aria-label="Permalink to &quot;注意事项（这是要后端要注意的问题，因为接口地址是后端提供的）&quot;">​</a></h2><ul><li>服务器域名需经过 <code>ICP</code>备案。</li><li>域名格式不支持<code>IP</code>地址。</li><li>必须是 <code>https</code> 服务器。</li></ul>',21)]))}const m=i(p,[["render",k]]);export{y as __pageData,m as default};
